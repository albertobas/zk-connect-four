{
  "address": "0x2d3Fc1B4769F6DDd4aBfe1A239e4504c12c4f364",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "pubSignals",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdd990c0f2ef0cb439f87ffa36c2ddc79db9df0b781daea92ee54273c109c1ed",
  "receipt": {
    "to": null,
    "from": "0x37A8b628888c272f6Fb9bE8F1a8eb8e454E0dA1C",
    "contractAddress": "0x2d3Fc1B4769F6DDd4aBfe1A239e4504c12c4f364",
    "transactionIndex": 29,
    "gasUsed": "1643789",
    "logsBloom": "0x
    "blockHash": "0xbd4129faa96ca6d9c4361e0d15c96e0cab8ba980277273a2b8c94a5bbf74f724",
    "transactionHash": "0xcdd990c0f2ef0cb439f87ffa36c2ddc79db9df0b781daea92ee54273c109c1ed",
    "logs": [],
    "blockNumber": 4586893,
    "cumulativeGasUsed": "8066971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cc195a66cee8435568fb98c5880aac9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"pubSignals\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PlonkVerifier.sol\":\"PlonkVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/PlonkVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract PlonkVerifier {\\n    \\n    uint32 constant n =   2048;\\n    uint16 constant nPublic =  0;\\n    uint16 constant nLagrange = 1;\\n    \\n    uint256 constant Qmx = 21860498061975046407253899816641693767662127001312710827165092482856473738759;\\n    uint256 constant Qmy = 5587461405980676113259213824991350184161633058569307623360622124416736656291;\\n    uint256 constant Qlx = 17205514724380474560675698870726970777530659972821307390363937486452967767248;\\n    uint256 constant Qly = 1626080806820543624593297483559684828387873325019188043141200699846231869228;\\n    uint256 constant Qrx = 12816533340267352717302202824370639618836023434609267903868613242217854188350;\\n    uint256 constant Qry = 4250609910703003839063098979560314973243317978180441996765095186148318574576;\\n    uint256 constant Qox = 852253704525284570429127090503673830399146459822008766736498705723991177487;\\n    uint256 constant Qoy = 645693065661662809594897016601790280947969510348935953876736831424295793952;\\n    uint256 constant Qcx = 19473877717549477401047294108371075543588574931254806132235897544791691842868;\\n    uint256 constant Qcy = 7372313025002968452939380632474670903497776608738001174435005968756835037141;\\n    uint256 constant S1x = 6993805114491962883029519481932230959437071478304106468051487595660895902451;\\n    uint256 constant S1y = 15262839919578288290007588089214574184237216221046070003769301271475955683685;\\n    uint256 constant S2x = 18804112516533961002913426251089729205315792346182294219851155203580464106406;\\n    uint256 constant S2y = 16241236717275723890609947452006527189066100322708475894168644916464755374535;\\n    uint256 constant S3x = 10821534100998022551871145161286536098427862649434178967354833917787392077679;\\n    uint256 constant S3y = 8400478933773888578199244194687783372319621575976386983972116113370770276103;\\n    uint256 constant k1 = 2;\\n    uint256 constant k2 = 3;\\n    uint256 constant X2x1 = 21831381940315734285607113342023901060522397560371972897001948545212302161822;\\n    uint256 constant X2x2 = 17231025384763736816414546592865244497437017442647097510447326538965263639101;\\n    uint256 constant X2y1 = 2388026358213174446665280700919698872609886601280537296205114254867301080648;\\n    uint256 constant X2y2 = 11507326595632554467052522095592665270651932854513688777769618397986436103170;\\n    \\n    uint256 constant q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant qf = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint256 constant w1 = 1120550406532664055539694724667294622065367841900378087843176726913374367458;    \\n    \\n    uint256 constant G1x = 1;\\n    uint256 constant G1y = 2;\\n    uint256 constant G2x1 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant G2x2 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant G2y1 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant G2y2 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint16 constant pA = 32;\\n    uint16 constant pB = 96;\\n    uint16 constant pC = 160;\\n    uint16 constant pZ = 224;\\n    uint16 constant pT1 = 288;\\n    uint16 constant pT2 = 352;\\n    uint16 constant pT3 = 416;\\n    uint16 constant pWxi = 480;\\n    uint16 constant pWxiw = 544;\\n    uint16 constant pEval_a = 608;\\n    uint16 constant pEval_b = 640;\\n    uint16 constant pEval_c = 672;\\n    uint16 constant pEval_s1 = 704;\\n    uint16 constant pEval_s2 = 736;\\n    uint16 constant pEval_zw = 768;\\n    uint16 constant pEval_r = 800;\\n    \\n    uint16 constant pAlpha = 0;\\n    uint16 constant pBeta = 32;\\n    uint16 constant pGamma = 64;\\n    uint16 constant pXi = 96;\\n    uint16 constant pXin = 128;\\n    uint16 constant pBetaXi = 160;\\n    uint16 constant pV1 = 192;\\n    uint16 constant pV2 = 224;\\n    uint16 constant pV3 = 256;\\n    uint16 constant pV4 = 288;\\n    uint16 constant pV5 = 320;\\n    uint16 constant pV6 = 352;\\n    uint16 constant pU = 384;\\n    uint16 constant pPl = 416;\\n    uint16 constant pEval_t = 448;\\n    uint16 constant pA1 = 480;\\n    uint16 constant pB1 = 544;\\n    uint16 constant pZh = 608;\\n    uint16 constant pZhInv = 640;\\n    \\n    uint16 constant pEval_l1 = 672;\\n    \\n    \\n    \\n    uint16 constant lastMem = 704;\\n\\n    function verifyProof(bytes memory proof, uint[] memory pubSignals) public view returns (bool) {\\n        assembly {\\n            /////////\\n            // Computes the inverse using the extended euclidean algorithm\\n            /////////\\n            function inverse(a, q) -> inv {\\n                let t := 0     \\n                let newt := 1\\n                let r := q     \\n                let newr := a\\n                let quotient\\n                let aux\\n                \\n                for { } newr { } {\\n                    quotient := sdiv(r, newr)\\n                    aux := sub(t, mul(quotient, newt))\\n                    t:= newt\\n                    newt:= aux\\n                    \\n                    aux := sub(r,mul(quotient, newr))\\n                    r := newr\\n                    newr := aux\\n                }\\n                \\n                if gt(r, 1) { revert(0,0) }\\n                if slt(t, 0) { t:= add(t, q) }\\n\\n                inv := t\\n            }\\n            \\n            ///////\\n            // Computes the inverse of an array of values\\n            // See https://vitalik.ca/general/2018/07/21/starks_part_3.html in section where explain fields operations\\n            //////\\n            function inverseArray(pVals, n) {\\n    \\n                let pAux := mload(0x40)     // Point to the next free position\\n                let pIn := pVals\\n                let lastPIn := add(pVals, mul(n, 32))  // Read n elemnts\\n                let acc := mload(pIn)       // Read the first element\\n                pIn := add(pIn, 32)         // Point to the second element\\n                let inv\\n    \\n                \\n                for { } lt(pIn, lastPIn) { \\n                    pAux := add(pAux, 32) \\n                    pIn := add(pIn, 32)\\n                } \\n                {\\n                    mstore(pAux, acc)\\n                    acc := mulmod(acc, mload(pIn), q)\\n                }\\n                acc := inverse(acc, q)\\n                \\n                // At this point pAux pint to the next free position we substract 1 to point to the last used\\n                pAux := sub(pAux, 32)\\n                // pIn points to the n+1 element, we substract to point to n\\n                pIn := sub(pIn, 32)\\n                lastPIn := pVals  // We don't process the first element \\n                for { } gt(pIn, lastPIn) { \\n                    pAux := sub(pAux, 32) \\n                    pIn := sub(pIn, 32)\\n                } \\n                {\\n                    inv := mulmod(acc, mload(pAux), q)\\n                    acc := mulmod(acc, mload(pIn), q)\\n                    mstore(pIn, inv)\\n                }\\n                // pIn points to first element, we just set it.\\n                mstore(pIn, acc)\\n            }\\n            \\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n            }\\n            \\n            function checkInput(pProof) {\\n                if iszero(eq(mload(pProof), 800 )) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n                checkField(mload(add(pProof, pEval_a)))\\n                checkField(mload(add(pProof, pEval_b)))\\n                checkField(mload(add(pProof, pEval_c)))\\n                checkField(mload(add(pProof, pEval_s1)))\\n                checkField(mload(add(pProof, pEval_s2)))\\n                checkField(mload(add(pProof, pEval_zw)))\\n                checkField(mload(add(pProof, pEval_r)))\\n\\n                // Points are checked in the point operations precompiled smart contracts\\n            }\\n            \\n            function calculateChallanges(pProof, pMem, pPublic) {\\n            \\n                let a\\n                let b\\n\\n                \\n                mstore( add(pMem, 704 ), mload( add( pProof, pA)))\\n                mstore( add(pMem, 736 ), mload( add( pProof, add(pA,32))))\\n                mstore( add(pMem, 768 ), mload( add( pProof, add(pA,64))))\\n                mstore( add(pMem, 800 ), mload( add( pProof, add(pA,96))))\\n                mstore( add(pMem, 832 ), mload( add( pProof, add(pA,128))))\\n                mstore( add(pMem, 864 ), mload( add( pProof, add(pA,160))))\\n                \\n                b := mod(keccak256(add(pMem, lastMem), 192), q) \\n                mstore( add(pMem, pBeta), b)\\n                mstore( add(pMem, pGamma), mod(keccak256(add(pMem, pBeta), 32), q))\\n                mstore( add(pMem, pAlpha), mod(keccak256(add(pProof, pZ), 64), q))\\n                \\n                a := mod(keccak256(add(pProof, pT1), 192), q)\\n                mstore( add(pMem, pXi), a)\\n                mstore( add(pMem, pBetaXi), mulmod(b, a, q))\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                a:= mulmod(a, a, q)\\n                \\n                mstore( add(pMem, pXin), a)\\n                a:= mod(add(sub(a, 1),q), q)\\n                mstore( add(pMem, pZh), a)\\n                mstore( add(pMem, pZhInv), a)  // We will invert later together with lagrange pols\\n                \\n                let v1 := mod(keccak256(add(pProof, pEval_a), 224), q)\\n                mstore( add(pMem, pV1), v1)\\n                a := mulmod(v1, v1, q)\\n                mstore( add(pMem, pV2), a)\\n                a := mulmod(a, v1, q)\\n                mstore( add(pMem, pV3), a)\\n                a := mulmod(a, v1, q)\\n                mstore( add(pMem, pV4), a)\\n                a := mulmod(a, v1, q)\\n                mstore( add(pMem, pV5), a)\\n                a := mulmod(a, v1, q)\\n                mstore( add(pMem, pV6), a)\\n                \\n                mstore( add(pMem, pU), mod(keccak256(add(pProof, pWxi), 128), q))\\n            }\\n            \\n            function calculateLagrange(pMem) {\\n\\n                let w := 1                \\n                \\n                mstore(\\n                    add(pMem, pEval_l1), \\n                    mulmod(\\n                        n, \\n                        mod(\\n                            add(\\n                                sub(\\n                                    mload(add(pMem, pXi)), \\n                                    w\\n                                ), \\n                                q\\n                            ),\\n                            q\\n                        ), \\n                        q\\n                    )\\n                )\\n                \\n                \\n                \\n                inverseArray(add(pMem, pZhInv), 2 )\\n                \\n                let zh := mload(add(pMem, pZh))\\n                w := 1\\n                \\n                \\n                mstore(\\n                    add(pMem, pEval_l1 ), \\n                    mulmod(\\n                        mload(add(pMem, pEval_l1 )),\\n                        zh,\\n                        q\\n                    )\\n                )\\n                \\n                \\n                \\n\\n\\n            }\\n            \\n            function calculatePl(pMem, pPub) {\\n                let pl := 0\\n                \\n                \\n                \\n                mstore(add(pMem, pPl), pl)\\n                \\n\\n            }\\n\\n            function calculateT(pProof, pMem) {\\n                let t\\n                let t1\\n                let t2\\n                t := addmod(\\n                    mload(add(pProof, pEval_r)), \\n                    mload(add(pMem, pPl)), \\n                    q\\n                )\\n                \\n                t1 := mulmod(\\n                    mload(add(pProof, pEval_s1)),\\n                    mload(add(pMem, pBeta)),\\n                    q\\n                )\\n\\n                t1 := addmod(\\n                    t1,\\n                    mload(add(pProof, pEval_a)),\\n                    q\\n                )\\n                \\n                t1 := addmod(\\n                    t1,\\n                    mload(add(pMem, pGamma)),\\n                    q\\n                )\\n\\n                t2 := mulmod(\\n                    mload(add(pProof, pEval_s2)),\\n                    mload(add(pMem, pBeta)),\\n                    q\\n                )\\n\\n                t2 := addmod(\\n                    t2,\\n                    mload(add(pProof, pEval_b)),\\n                    q\\n                )\\n                \\n                t2 := addmod(\\n                    t2,\\n                    mload(add(pMem, pGamma)),\\n                    q\\n                )\\n                \\n                t1 := mulmod(t1, t2, q)\\n                \\n                t2 := addmod(\\n                    mload(add(pProof, pEval_c)),\\n                    mload(add(pMem, pGamma)),\\n                    q\\n                )\\n\\n                t1 := mulmod(t1, t2, q)\\n                t1 := mulmod(t1, mload(add(pProof, pEval_zw)), q)\\n                t1 := mulmod(t1, mload(add(pMem, pAlpha)), q)\\n                \\n                t2 := mulmod(\\n                    mload(add(pMem, pEval_l1)), \\n                    mload(add(pMem, pAlpha)), \\n                    q\\n                )\\n\\n                t2 := mulmod(\\n                    t2, \\n                    mload(add(pMem, pAlpha)), \\n                    q\\n                )\\n\\n                t1 := addmod(t1, t2, q)\\n                \\n                t := mod(sub(add(t, q), t1), q)\\n                t := mulmod(t, mload(add(pMem, pZhInv)), q)\\n                \\n                mstore( add(pMem, pEval_t) , t)\\n\\n            }\\n            \\n            function g1_set(pR, pP) {\\n                mstore(pR, mload(pP))\\n                mstore(add(pR, 32), mload(add(pP,32)))\\n            }\\n\\n            function g1_acc(pR, pP) {\\n                let mIn := mload(0x40)\\n                mstore(mIn, mload(pR))\\n                mstore(add(mIn,32), mload(add(pR, 32)))\\n                mstore(add(mIn,64), mload(pP))\\n                mstore(add(mIn,96), mload(add(pP, 32)))\\n\\n                let success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n                \\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n            }\\n\\n            function g1_mulAcc(pR, pP, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, mload(pP))\\n                mstore(add(mIn,32), mload(add(pP, 32)))\\n                mstore(add(mIn,64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n                \\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n                \\n                mstore(add(mIn,64), mload(pR))\\n                mstore(add(mIn,96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n                \\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n                \\n            }\\n\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn,32), y)\\n                mstore(add(mIn,64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n                \\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n                \\n                mstore(add(mIn,64), mload(pR))\\n                mstore(add(mIn,96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n                \\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n            }\\n\\n            function g1_mulSetC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn,32), y)\\n                mstore(add(mIn,64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, pR, 64)\\n                \\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0,0x20)\\n                }\\n            }\\n\\n\\n            function calculateA1(pProof, pMem) {\\n                let p := add(pMem, pA1)\\n                g1_set(p, add(pProof, pWxi))\\n                g1_mulAcc(p, add(pProof, pWxiw), mload(add(pMem, pU)))\\n            }\\n            \\n            \\n            function calculateB1(pProof, pMem) {\\n                let s\\n                let s1\\n                let p := add(pMem, pB1)\\n                \\n                // Calculate D\\n                s := mulmod( mload(add(pProof, pEval_a)), mload(add(pMem, pV1)), q)\\n                g1_mulSetC(p, Qlx, Qly, s)\\n\\n                s := mulmod( s, mload(add(pProof, pEval_b)), q)                \\n                g1_mulAccC(p, Qmx, Qmy, s)\\n\\n                s := mulmod( mload(add(pProof, pEval_b)), mload(add(pMem, pV1)), q)\\n                g1_mulAccC(p, Qrx, Qry, s)\\n                \\n                s := mulmod( mload(add(pProof, pEval_c)), mload(add(pMem, pV1)), q)\\n                g1_mulAccC(p, Qox, Qoy, s)\\n\\n                s :=mload(add(pMem, pV1))\\n                g1_mulAccC(p, Qcx, Qcy, s)\\n\\n                s := addmod(mload(add(pProof, pEval_a)), mload(add(pMem, pBetaXi)), q)\\n                s := addmod(s, mload(add(pMem, pGamma)), q)\\n                s1 := mulmod(k1, mload(add(pMem, pBetaXi)), q)\\n                s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\\n                s1 := addmod(s1, mload(add(pMem, pGamma)), q)\\n                s := mulmod(s, s1, q)\\n                s1 := mulmod(k2, mload(add(pMem, pBetaXi)), q)\\n                s1 := addmod(s1, mload(add(pProof, pEval_c)), q)\\n                s1 := addmod(s1, mload(add(pMem, pGamma)), q)\\n                s := mulmod(s, s1, q)\\n                s := mulmod(s, mload(add(pMem, pAlpha)), q)\\n                s := mulmod(s, mload(add(pMem, pV1)), q)\\n                s1 := mulmod(mload(add(pMem, pEval_l1)), mload(add(pMem, pAlpha)), q)\\n                s1 := mulmod(s1, mload(add(pMem, pAlpha)), q)\\n                s1 := mulmod(s1, mload(add(pMem, pV1)), q)\\n                s := addmod(s, s1, q)\\n                s := addmod(s, mload(add(pMem, pU)), q)\\n                g1_mulAcc(p, add(pProof, pZ), s)\\n                \\n                s := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s1)), q)\\n                s := addmod(s, mload(add(pProof, pEval_a)), q)\\n                s := addmod(s, mload(add(pMem, pGamma)), q)\\n                s1 := mulmod(mload(add(pMem, pBeta)), mload(add(pProof, pEval_s2)), q)\\n                s1 := addmod(s1, mload(add(pProof, pEval_b)), q)\\n                s1 := addmod(s1, mload(add(pMem, pGamma)), q)\\n                s := mulmod(s, s1, q)\\n                s := mulmod(s, mload(add(pMem, pAlpha)), q)\\n                s := mulmod(s, mload(add(pMem, pV1)), q)\\n                s := mulmod(s, mload(add(pMem, pBeta)), q)\\n                s := mulmod(s, mload(add(pProof, pEval_zw)), q)\\n                s := mod(sub(q, s), q)\\n                g1_mulAccC(p, S3x, S3y, s)\\n\\n\\n                // calculate F\\n                g1_acc(p , add(pProof, pT1))\\n\\n                s := mload(add(pMem, pXin))\\n                g1_mulAcc(p, add(pProof, pT2), s)\\n                \\n                s := mulmod(s, s, q)\\n                g1_mulAcc(p, add(pProof, pT3), s)\\n                \\n                g1_mulAcc(p, add(pProof, pA), mload(add(pMem, pV2)))\\n                g1_mulAcc(p, add(pProof, pB), mload(add(pMem, pV3)))\\n                g1_mulAcc(p, add(pProof, pC), mload(add(pMem, pV4)))\\n                g1_mulAccC(p, S1x, S1y, mload(add(pMem, pV5)))\\n                g1_mulAccC(p, S2x, S2y, mload(add(pMem, pV6)))\\n                \\n                // calculate E\\n                s := mload(add(pMem, pEval_t))\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_r)), mload(add(pMem, pV1)), q), q)\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_a)), mload(add(pMem, pV2)), q), q)\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_b)), mload(add(pMem, pV3)), q), q)\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_c)), mload(add(pMem, pV4)), q), q)\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_s1)), mload(add(pMem, pV5)), q), q)\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_s2)), mload(add(pMem, pV6)), q), q)\\n                s := addmod(s, mulmod(mload(add(pProof, pEval_zw)), mload(add(pMem, pU)), q), q)\\n                s := mod(sub(q, s), q)\\n                g1_mulAccC(p, G1x, G1y, s)\\n                \\n                \\n                // Last part of B\\n                s := mload(add(pMem, pXi))\\n                g1_mulAcc(p, add(pProof, pWxi), s)\\n\\n                s := mulmod(mload(add(pMem, pU)), mload(add(pMem, pXi)), q)\\n                s := mulmod(s, w1, q)\\n                g1_mulAcc(p, add(pProof, pWxiw), s)\\n\\n            }\\n            \\n            function checkPairing(pMem) -> isOk {\\n                let mIn := mload(0x40)\\n                mstore(mIn, mload(add(pMem, pA1)))\\n                mstore(add(mIn,32), mload(add(add(pMem, pA1), 32)))\\n                mstore(add(mIn,64), X2x2)\\n                mstore(add(mIn,96), X2x1)\\n                mstore(add(mIn,128), X2y2)\\n                mstore(add(mIn,160), X2y1)\\n                mstore(add(mIn,192), mload(add(pMem, pB1)))\\n                let s := mload(add(add(pMem, pB1), 32))\\n                s := mod(sub(qf, s), qf)\\n                mstore(add(mIn,224), s)\\n                mstore(add(mIn,256), G2x2)\\n                mstore(add(mIn,288), G2x1)\\n                mstore(add(mIn,320), G2y2)\\n                mstore(add(mIn,352), G2y1)\\n                \\n                let success := staticcall(sub(gas(), 2000), 8, mIn, 384, mIn, 0x20)\\n                \\n                isOk := and(success, mload(mIn))\\n            }\\n            \\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, lastMem))\\n            \\n            checkInput(proof)\\n            calculateChallanges(proof, pMem, pubSignals)\\n            calculateLagrange(pMem)\\n            calculatePl(pMem, pubSignals)\\n            calculateT(proof, pMem)\\n            calculateA1(proof, pMem)\\n            calculateB1(proof, pMem)\\n            let isValid := checkPairing(pMem)\\n            \\n            mstore(0x40, sub(pMem, lastMem))\\n            mstore(0, isValid)\\n            return(0,0x20)\\n        }\\n        \\n    }\\n}\\n\",\"keccak256\":\"0x439cf2b9feacfb334c0ff59a0a627522649f3f3ac88fc53079fa8f1fcdc92814\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ccb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e8e1e1314610030575b600080fd5b61004a60048036038101906100459190611be7565b610060565b6040516100579190611c7a565b60405180910390f35b6000611924565b600080600184846000805b821561009c5782840591508482028603905084955080945082820284039050829350809250610072565b60018411156100aa57600080fd5b60008612156100b95788860195505b85965050505050505092915050565b60405181602084028301815160208301925060005b82841015610120578185527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018451830991506020850194506020840193506100dd565b61014a7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183610067565b91506020850394506020840393508592505b828411156101c6577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018551830990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184518309915080845260208503945060208403935061015c565b81845250505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610203576000805260206000f35b50565b61032081511461021a576000805260206000f35b6102286102608201516101d2565b6102366102808201516101d2565b6102446102a08201516101d2565b6102526102c08201516101d2565b6102606102e08201516101d2565b61026e6103008201516101d2565b61027c6103208201516101d2565b50565b60008060208301516102c0850152602080018301516102e085015260406020018301516103008501526060602001830151610320850152608060200183015161034085015260a06020018301516103608501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c06102c08601200690508060208501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020808601200660408501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060e08501200660008501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c06101208501200691508160608501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820960a08501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991508160808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180600184030106915081610260850152816102808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160e0610260850120068060c08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181820992508260e08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101008601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101208601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101408601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101608601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160806101e086012006610180860152505050505050565b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836060860151030106610800096102a0830152610749600261028084016100c8565b610260820151600191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102a0850151096102a0840152505050565b6000806101a0830152505050565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08601516103208601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102c08601510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102e08601510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408601516102a08601510890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018501030692507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028086015184099250826101c08601525050505050565b81518152602082015160208201525050565b6040518151815260208201516020820152825160408201526020830151606082015260408260808360066107d05a03fa80610af4576000805260206000f35b50505050565b6000604051835181526020840151602082015284604082015260408160608360076107d05a03fa915081610b32576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610b62576000805260206000f35b5050505050565b600060405183815284602082015285604082015260408160608360076107d05a03fa915081610b9c576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610bcc576000805260206000f35b505050505050565b600060405183815284602082015285604082015260408360608360076107d05a03fa915081610c07576000805260206000f35b505050505050565b6101e08201610c226101e0830182610aa3565b610c36610180840151610220840183610afa565b505050565b60008061022084017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151610260860151099250610cbe837f039854414d3e857a3ef04e7e785cbad6a7b22275d66a3a2840802656ac14472c7f2609f9ea6a05c4632a499dc0c89e5957e63b2559b9aaff6ba368a13ae06e7cd084610bd4565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028085015184099250610d35837f0c5a641e234ecc44700f1893f159e0870d3dfa7028557d1f74ca243cc8af7ba37f30549a7aaf88eb520dd1c60c07cb573df6e9ce01b0b5be490a88beb398423e0784610b69565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151610280860151099250610db0837f0965c28c3fe0dd9e15b239de75579969689939706f5c15cdcc8c75258364f7f07f1c55e69af64c3aa995d61ad3d6850a223eca767cdc0d8ab79a6709a574e8bb3e84610b69565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102a0860151099250610e2b837f016d7306e7f52880288ba6fc0a7612d3479ff64bdeaba2aeea3e6d093b4ef5207f01e25bc6d3e5041cca18e6e714a06c961d94af8244537a03a8c3c76ad032b90f84610b69565b60c08501519250610e7e837f104c94d02bdcf0300cbaa1fabca3dac2d108d82b3444da43a2ec270aaf932fd57f2b0dd2fe13a21db79d9f8250e2d97d37cfce13b203663de359bd5356d817553484610b69565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08601516102608601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160020991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160030991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102a0850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180860151840892506111598360e0860183610afa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102c085015160208701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102e085015160208701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001030692506113c3837f129280a94c7a5e43fc5047bd4717352c10d3566853ec676c8a9d3b41447f7f077f17ecc57079139af6b34fcf5c27a2b220dc361cec4568dcf42abcda5c1a0a6f6f84610b69565b6113d1610120850182610ab5565b608085015192506113e783610160860183610afa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838409925061141c836101a0860183610afa565b61142e60e08601516020860183610afa565b6114416101008601516060860183610afa565b61145461012086015160a0860183610afa565b6114a56101408601517f21be7615110aecbebb338503b8acddef028209a5e45c68b6ff39dd300e8fd1657f0f765a79794cbfa399048cb3bd95088466477ed5b44193d7d4a7e2e29124daf384610b69565b6114f66101608601517f23e836d743d028972d4548ade70bf5caf47e612d6e891ae02893a388beeb79c77f2992c0220ba353ff15d65aa02d90e89df76897e50d3edd97f165ff3ec3ba8ba684610b69565b6101c085015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060c087015161032087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060e087015161026087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061010087015161028087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101208701516102a087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101408701516102c087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101608701516102e087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061018087015161030087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001030692506116b6836002600184610b69565b606085015192506116cc836101e0860183610afa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160608601516101808701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f027a358499c5042bb4027fd7a5355d71b8c12c177494f0cad00a58f9769a2ee28409925061175083610220860183610afa565b5050505050565b60006040516101e0830151815260206101e08401015160208201527f26186a2d65ee4d2f9c9a5b91f86597d35f192cd120caf7e935d8443d1938e23d60408201527f30441fd1b5d3370482c42152a8899027716989a6996c2535bc9f7fee8aaef79e60608201527f1970ea81dd6992adfbc571effb03503adbbb6a857f578403c6c40e22d65b3c0260808201527f054793348f12c0cf5622c340573cb277586319de359ab9389778f689786b1e4860a082015261022083015160c08201526020610220840101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47030690508060e08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101008301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101208301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6101408301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6101608301526020826101808460086107d05a03fa825181169350505050919050565b6040516102c0810160405261193884610206565b61194383828661027f565b61194c816106e2565b6119568382610787565b6119608185610795565b61196a8185610c0f565b6119748185610c3b565b61197d81611757565b6102c082036040528060005260206000f35b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119f6826119ad565b810181811067ffffffffffffffff82111715611a1557611a146119be565b5b80604052505050565b6000611a2861198f565b9050611a3482826119ed565b919050565b600067ffffffffffffffff821115611a5457611a536119be565b5b611a5d826119ad565b9050602081019050919050565b82818337600083830152505050565b6000611a8c611a8784611a39565b611a1e565b905082815260208101848484011115611aa857611aa76119a8565b5b611ab3848285611a6a565b509392505050565b600082601f830112611ad057611acf6119a3565b5b8135611ae0848260208601611a79565b91505092915050565b600067ffffffffffffffff821115611b0457611b036119be565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b611b2d81611b1a565b8114611b3857600080fd5b50565b600081359050611b4a81611b24565b92915050565b6000611b63611b5e84611ae9565b611a1e565b90508083825260208201905060208402830185811115611b8657611b85611b15565b5b835b81811015611baf5780611b9b8882611b3b565b845260208401935050602081019050611b88565b5050509392505050565b600082601f830112611bce57611bcd6119a3565b5b8135611bde848260208601611b50565b91505092915050565b60008060408385031215611bfe57611bfd611999565b5b600083013567ffffffffffffffff811115611c1c57611c1b61199e565b5b611c2885828601611abb565b925050602083013567ffffffffffffffff811115611c4957611c4861199e565b5b611c5585828601611bb9565b9150509250929050565b60008115159050919050565b611c7481611c5f565b82525050565b6000602082019050611c8f6000830184611c6b565b9291505056fea2646970667358221220c033dca1d8a2cb6ac0fd4a8d4d6f6ecf89275d653dbea36d1273f8831d5cbde464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e8e1e1314610030575b600080fd5b61004a60048036038101906100459190611be7565b610060565b6040516100579190611c7a565b60405180910390f35b6000611924565b600080600184846000805b821561009c5782840591508482028603905084955080945082820284039050829350809250610072565b60018411156100aa57600080fd5b60008612156100b95788860195505b85965050505050505092915050565b60405181602084028301815160208301925060005b82841015610120578185527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018451830991506020850194506020840193506100dd565b61014a7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183610067565b91506020850394506020840393508592505b828411156101c6577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018551830990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184518309915080845260208503945060208403935061015c565b81845250505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610203576000805260206000f35b50565b61032081511461021a576000805260206000f35b6102286102608201516101d2565b6102366102808201516101d2565b6102446102a08201516101d2565b6102526102c08201516101d2565b6102606102e08201516101d2565b61026e6103008201516101d2565b61027c6103208201516101d2565b50565b60008060208301516102c0850152602080018301516102e085015260406020018301516103008501526060602001830151610320850152608060200183015161034085015260a06020018301516103608501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c06102c08601200690508060208501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020808601200660408501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060e08501200660008501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c06101208501200691508160608501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820960a08501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182830991508160808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180600184030106915081610260850152816102808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160e0610260850120068060c08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181820992508260e08601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101008601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101208601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101408601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250826101608601527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160806101e086012006610180860152505050505050565b60017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836060860151030106610800096102a0830152610749600261028084016100c8565b610260820151600191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816102a0850151096102a0840152505050565b6000806101a0830152505050565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08601516103208601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102c08601510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208601516102e08601510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408601516102a08601510890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018501030692507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028086015184099250826101c08601525050505050565b81518152602082015160208201525050565b6040518151815260208201516020820152825160408201526020830151606082015260408260808360066107d05a03fa80610af4576000805260206000f35b50505050565b6000604051835181526020840151602082015284604082015260408160608360076107d05a03fa915081610b32576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610b62576000805260206000f35b5050505050565b600060405183815284602082015285604082015260408160608360076107d05a03fa915081610b9c576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915081610bcc576000805260206000f35b505050505050565b600060405183815284602082015285604082015260408360608360076107d05a03fa915081610c07576000805260206000f35b505050505050565b6101e08201610c226101e0830182610aa3565b610c36610180840151610220840183610afa565b505050565b60008061022084017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151610260860151099250610cbe837f039854414d3e857a3ef04e7e785cbad6a7b22275d66a3a2840802656ac14472c7f2609f9ea6a05c4632a499dc0c89e5957e63b2559b9aaff6ba368a13ae06e7cd084610bd4565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161028085015184099250610d35837f0c5a641e234ecc44700f1893f159e0870d3dfa7028557d1f74ca243cc8af7ba37f30549a7aaf88eb520dd1c60c07cb573df6e9ce01b0b5be490a88beb398423e0784610b69565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151610280860151099250610db0837f0965c28c3fe0dd9e15b239de75579969689939706f5c15cdcc8c75258364f7f07f1c55e69af64c3aa995d61ad3d6850a223eca767cdc0d8ab79a6709a574e8bb3e84610b69565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601516102a0860151099250610e2b837f016d7306e7f52880288ba6fc0a7612d3479ff64bdeaba2aeea3e6d093b4ef5207f01e25bc6d3e5041cca18e6e714a06c961d94af8244537a03a8c3c76ad032b90f84610b69565b60c08501519250610e7e837f104c94d02bdcf0300cbaa1fabca3dac2d108d82b3444da43a2ec270aaf932fd57f2b0dd2fe13a21db79d9f8250e2d97d37cfce13b203663de359bd5356d817553484610b69565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08601516102608601510892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160020991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a086015160030991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102a0850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160008601516102a08701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180860151840892506111598360e0860183610afa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102c085015160208701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102e085015160208701510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610280850151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040860151830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c0860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020860151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610300850151840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001030692506113c3837f129280a94c7a5e43fc5047bd4717352c10d3566853ec676c8a9d3b41447f7f077f17ecc57079139af6b34fcf5c27a2b220dc361cec4568dcf42abcda5c1a0a6f6f84610b69565b6113d1610120850182610ab5565b608085015192506113e783610160860183610afa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838409925061141c836101a0860183610afa565b61142e60e08601516020860183610afa565b6114416101008601516060860183610afa565b61145461012086015160a0860183610afa565b6114a56101408601517f21be7615110aecbebb338503b8acddef028209a5e45c68b6ff39dd300e8fd1657f0f765a79794cbfa399048cb3bd95088466477ed5b44193d7d4a7e2e29124daf384610b69565b6114f66101608601517f23e836d743d028972d4548ade70bf5caf47e612d6e891ae02893a388beeb79c77f2992c0220ba353ff15d65aa02d90e89df76897e50d3edd97f165ff3ec3ba8ba684610b69565b6101c085015192507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060c087015161032087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018060e087015161026087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061010087015161028087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101208701516102a087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101408701516102c087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101608701516102e087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061018087015161030087015109840892507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001030692506116b6836002600184610b69565b606085015192506116cc836101e0860183610afa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160608601516101808701510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f027a358499c5042bb4027fd7a5355d71b8c12c177494f0cad00a58f9769a2ee28409925061175083610220860183610afa565b5050505050565b60006040516101e0830151815260206101e08401015160208201527f26186a2d65ee4d2f9c9a5b91f86597d35f192cd120caf7e935d8443d1938e23d60408201527f30441fd1b5d3370482c42152a8899027716989a6996c2535bc9f7fee8aaef79e60608201527f1970ea81dd6992adfbc571effb03503adbbb6a857f578403c6c40e22d65b3c0260808201527f054793348f12c0cf5622c340573cb277586319de359ab9389778f689786b1e4860a082015261022083015160c08201526020610220840101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47030690508060e08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101008301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101208301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6101408301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6101608301526020826101808460086107d05a03fa825181169350505050919050565b6040516102c0810160405261193884610206565b61194383828661027f565b61194c816106e2565b6119568382610787565b6119608185610795565b61196a8185610c0f565b6119748185610c3b565b61197d81611757565b6102c082036040528060005260206000f35b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119f6826119ad565b810181811067ffffffffffffffff82111715611a1557611a146119be565b5b80604052505050565b6000611a2861198f565b9050611a3482826119ed565b919050565b600067ffffffffffffffff821115611a5457611a536119be565b5b611a5d826119ad565b9050602081019050919050565b82818337600083830152505050565b6000611a8c611a8784611a39565b611a1e565b905082815260208101848484011115611aa857611aa76119a8565b5b611ab3848285611a6a565b509392505050565b600082601f830112611ad057611acf6119a3565b5b8135611ae0848260208601611a79565b91505092915050565b600067ffffffffffffffff821115611b0457611b036119be565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b611b2d81611b1a565b8114611b3857600080fd5b50565b600081359050611b4a81611b24565b92915050565b6000611b63611b5e84611ae9565b611a1e565b90508083825260208201905060208402830185811115611b8657611b85611b15565b5b835b81811015611baf5780611b9b8882611b3b565b845260208401935050602081019050611b88565b5050509392505050565b600082601f830112611bce57611bcd6119a3565b5b8135611bde848260208601611b50565b91505092915050565b60008060408385031215611bfe57611bfd611999565b5b600083013567ffffffffffffffff811115611c1c57611c1b61199e565b5b611c2885828601611abb565b925050602083013567ffffffffffffffff811115611c4957611c4861199e565b5b611c5585828601611bb9565b9150509250929050565b60008115159050919050565b611c7481611c5f565b82525050565b6000602082019050611c8f6000830184611c6b565b9291505056fea2646970667358221220c033dca1d8a2cb6ac0fd4a8d4d6f6ecf89275d653dbea36d1273f8831d5cbde464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}